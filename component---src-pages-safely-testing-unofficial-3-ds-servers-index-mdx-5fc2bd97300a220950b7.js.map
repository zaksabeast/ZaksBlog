{"version":3,"sources":["webpack:///./src/pages/safely-testing-unofficial-3ds-servers/index.mdx"],"names":["metadata","title","description","date","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wTAMO,IAAMA,EAAW,CACtBC,MAAO,wCACPC,YAAa,+EACbC,KAAM,cAEKC,EAAe,GACtBC,EAAc,CAClBL,WACAI,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,+DACA,iJACA,0WACA,6DAA4C,+BAAGC,WAAW,KAAQ,CAC9D,KAAQ,wCADgC,YAA5C,QAE8B,+BAAGA,WAAW,KAAQ,CAChD,KAAQ,+BADkB,UAF9B,gDAKA,8CAA6B,+BAAGA,WAAW,KAAQ,CAC/C,KAAQ,mDADiB,mCAA7B,QAEqD,+BAAGA,WAAW,KAAQ,CACvE,KAAQ,+CADyC,6BAFrD,sLAKA,mWAAkV,+BAAGA,WAAW,KAAQ,CACpW,KAAQ,8CADsU,2BAAlV,gHAGA,8IACA,sDACA,2bACA,uWACA,kGACA,sBACE,kBAAIA,WAAW,MAAf,sEACA,kBAAIA,WAAW,MAAf,mEACA,kBAAIA,WAAW,MAAf,+FACA,kBAAIA,WAAW,MAAf,uFACA,kBAAIA,WAAW,MAAf,8EAEF,kFACA,wUACA,mLACA,2MACA,2FACA,+DACA,sBACE,kBAAIA,WAAW,MAAf,gGACA,kBAAIA,WAAW,MAAf,2FAEF,sQACA,gDACA,0LACA,gDAA+B,+BAAGA,WAAW,KAAQ,CACjD,KAAQ,6CADmB,uCAA/B,wEAGA,wUACA,0IACA,sBACE,kBAAIA,WAAW,MAAf,iGACA,kBAAIA,WAAW,MAAf,mFACA,kBAAIA,WAAW,MAAf,6CACA,kBAAIA,WAAW,MAAf,yCACA,kBAAIA,WAAW,MAAf,gEAEF,4UACA,oGACA,wEACA,sBACE,kBAAIA,WAAW,MAAf,qDACA,kBAAIA,WAAW,MAAf,wCAEF,yHACA,6EACA,0HAAyG,0BAAYA,WAAW,KAAvB,QAAzG,6DACA,6GACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8OAgBL,iDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sVAsBL,wJACA,kaACA,qBAAG,+BAAGA,WAAW,KAAQ,CACrB,KAAQ,wCADT,qCAAH,kTAGA,8PACA,+HACA,+CACA,mDAAkC,0BAAYA,WAAW,KAAvB,cAAlC,sGACA,6UACA,4CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2NAaL,0OACA,6HACA,2RACA,uWACA,8TACA,0WACA,0DACA,wKACA,6CAA4B,+BAAGA,WAAW,KAAQ,CAC9C,KAAQ,gDADgB,0CAA5B,6GAGA,qNACA,wLACA,qBAAG,+BAAGA,WAAW,KAAQ,CACrB,KAAQ,0CADT,WAAH,qQAGA,iEAAgD,+BAAGA,WAAW,KAAQ,CAClE,KAAQ,iIADoC,gCAAhD,kBAGA,iPACA,+VACA,8RACA,6KACA,oCACA,kRACA,gDAA+B,+BAAGA,WAAW,KAAQ,CACjD,KAAQ,sCADmB,UAA/B,wNAGA,mJACA,6QACA,iXACA,iEAAgD,+BAAGA,WAAW,KAAQ,CAClE,KAAQ,kEADoC,wBAAhD,8CAGA,uGAAsF,+BAAGA,WAAW,KAAQ,CACxG,KAAQ,uDAD0E,mBAAtF,MAOJJ,EAAWK,gBAAiB","file":"component---src-pages-safely-testing-unofficial-3-ds-servers-index-mdx-5fc2bd97300a220950b7.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ZaksBlog/ZaksBlog/src/layouts/post.js\";\nexport const metadata = {\n  title: 'Safely testing unofficial 3ds servers',\n  description: 'Patching the 3ds to mitigate the risk when using unofficial 3ds game servers',\n  date: '02/18/2021'\n};\nexport const _frontmatter = {};\nconst layoutProps = {\n  metadata,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>{`Safely testing unofficial 3ds servers`}</h1>\n    <p>{`(This post was edited on February 20, 2021 after I looked into FRD more and found the original auth flow was incorrect.)`}</p>\n    <p>{`The 3ds is no longer being manufactored and is at the end of its life, which means there's a high chance servers used by 3ds games to play online will be taken down at some point in the next few years. For preservation purposes and being able to enjoy past games, this is a good chance to start recreating online functionality for games.`}</p>\n    <p>{`There are groups and people, such as `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/PretendoNetwork/\"\n      }}>{`Pretendo`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kinnay/\"\n      }}>{`Kinnay`}</a>{`, who are working to accomplish such a task.`}</p>\n    <p>{`With a huge thanks to `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kinnay/NintendoClients/wiki\"\n      }}>{`documentation written by Kinnay`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Stary2001/nex-dissector\"\n      }}>{`Stary2001's nex-dissector`}</a>{`, I was able to recreate Pokemon's Gen 7 GTS services a few years ago. The Gen 7 games rely on the 3ds friend services in order to play online, so I also recreated those as well.`}</p>\n    <p>{`My initial attempt was partially to learn about the 3ds online services and partially to get something working, but I had intentions of rewriting it in the future. Originally, I wrote everything myself from the ground up to learn about the tiniest details of the 3ds online services. Recently, I started the rewrite using Kinnay's `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kinnay/NintendoClients\"\n      }}>{`NintendoClients library`}</a>{`; it's well maintained, easy to use, and has had many features and improvements over the past several years.`}</p>\n    <p>{`Testing my servers locally has been fine, but there were a few problems before I could ask other people to help test.`}</p>\n    <h2>{`Problems with public testing`}</h2>\n    <p>{`The first problem is related to the friend services. As previously mentioned, 3ds games tend to rely on the friend services when going online. While I recreated functionality, it's super easy for the 3ds to get desynchronized from the official servers (e.g. different lists of friends), which is not good. As long as the official friend services are up, it's better for consoles to use those over unofficial solutions.`}</p>\n    <p>{`The second problem is related to authentication. Authentication is how a user proves their identity to a server so only they can log in with their account. Each game has a pair of servers related to its online play: an authentication server and a game server. In order to locate the auth server, the 3ds talks to a server called NASC.`}</p>\n    <p>{`This is a very rough flow of how a 3ds game connects to its game servers:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The 3ds asks the NASC server for the game's auth server IP address`}</li>\n      <li parentName=\"ol\">{`The NASC server responds with the IP address of the auth server`}</li>\n      <li parentName=\"ol\">{`The 3ds authenticates with the auth server using a hidden user password, among other things`}</li>\n      <li parentName=\"ol\">{`The auth server responds with the IP address of the game server and a session token`}</li>\n      <li parentName=\"ol\">{`The 3ds starts communicating with the game server using the session token`}</li>\n    </ol>\n    <p>{`There's a bit more going on, but that's the general idea.`}</p>\n    <p>{`Step 3 poses a problem. Every 3ds user has a hidden password that is used to go online. If someone wants to connect to one of my unofficial servers, or a server made by another developer, they would need to provide their password so the unofficial auth server knows the password the 3ds will try to use.`}</p>\n    <p>{`It's a big security issue to disclose any password to someone. With the 3ds online services still operating, the password could be used in malicious ways.`}</p>\n    <p>{`A smaller issue is the bad user experience of having to run some sort of homebrew or script to extract a console password and do something with it before being able to go online.`}</p>\n    <p>{`There were other issues, but those two were at the top of my mind.`}</p>\n    <p>{`I was left with two problems to solve:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The 3ds should use the official servers for friend services and unofficial servers for games`}</li>\n      <li parentName=\"ul\">{`The 3ds should use the real password for friend services and a fake password for games`}</li>\n    </ul>\n    <p>{`Since the NASC server locates the game's auth server, and the auth server locates the actual server used to play online, I needed to make sure a 3ds would communicate with my custom NASC server, and everything else would fall into place.`}</p>\n    <h2>{`Finding a patch target`}</h2>\n    <p>{`The 3ds operating system is broken into several system modules, similar to a microservice architecture. FRD is the system module responsible for friend services.`}</p>\n    <p>{`A while ago I looked at `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.3dbrew.org/wiki/FRD_Savegame\"\n      }}>{`3dbrew's FRD savegame documentation`}</a>{` and noticed the save includes the user's password for going online.`}</p>\n    <p>{`Games shouldn't have access to the user's password, as that would be a security concern, and the password isn't likely to be copied between different system modules since that would be a larger attack surface, so I figured FRD must be solely responsible for talking with the auth servers for every game.`}</p>\n    <p>{`I looked into how the Gen 7 Pokemon games interact with FRD to go online and found out this was roughly the flow:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The game asks FRD for the game's auth server IP address, and the request is forwarded to NASC`}</li>\n      <li parentName=\"ol\">{`NASC responds with the auth server's IP address, which is forwarded to the game`}</li>\n      <li parentName=\"ol\">{`The game asks FRD for the user's password`}</li>\n      <li parentName=\"ol\">{`FRD responds with the user's password`}</li>\n      <li parentName=\"ol\">{`The game authenticates with the auth server and goes online`}</li>\n    </ol>\n    <p>{`This was a bummer to find out. If Nintendo owned the auth servers, then at worst a rogue developer or other security issue could only put tokens valid for a single session of a single game at risk. In this way, Nintendo wouldn't need to trust game developers in order for them to build online functionality.`}</p>\n    <p>{`But it turns out that was not the case: games access the password directly.`}</p>\n    <p>{`Regardless, this was important for two reasons:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`FRD is responsible for NASC server communications`}</li>\n      <li parentName=\"ul\">{`FRD is the owner of user's password`}</li>\n    </ul>\n    <p>{`The solutions to both of my original problems could be solved by patching the FRD system module.`}</p>\n    <h2>{`Official friend servers and unofficial game servers`}</h2>\n    <p>{`I dumped the FRD system module and opened it in Ghidra. When it loaded, I searched for the string `}<inlineCode parentName=\"p\">{`nasc`}</inlineCode>{` and had three results show up: prod, test, and dev urls.`}</p>\n    <p>{`All three of them were used in the same function that looked very roughly like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`void SOME_FUNCTION(char* param_0, int param_1) {\n  if (param_1 == 0) {\n    *param_0 = NASC_PROD_URL;\n  }\n\n  if (param_1 == 1) {\n    *param_0 = NASC_TEST_URL;\n  }\n\n  if (param_1 == 2) {\n    *param_0 = NASC_DEV_URL;\n  }\n}\n`}</code></pre>\n    <p>{`After a little cleaning:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`enum Environment {\n  PROD,\n  TEST,\n  DEV,\n};\n\nvoid getNascUrl(char* url, Environment environment) {\n  if (environment == Environment::PROD) {\n    *url = NASC_PROD_URL;\n  }\n\n  if (environment == Environment::TEST) {\n    *url = NASC_TEST_URL;\n  }\n\n  if (environment == Environment::DEV) {\n    *url = NASC_DEV_URL;\n  }\n}\n`}</code></pre>\n    <p>{`The production servers are used for regular users, and the test and dev environments are used to test and develop game servers.`}</p>\n    <p>{`The function responsible for getting the NASC url was referenced in a few locations. If the friend services and games used the same code to get the NASC urls, it would make sense for the function to only be used in one location. Since the function was used in multiple locations, it made sense for the friend services to ask for the NASC url in a different place in the code than game servers.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/LumaTeam/Luma3DS\"\n      }}>{`Luma3ds (the 3ds custom firmware)`}</a>{` allows debugging 3ds software with GDB, so I conntected GDB to the FRD system module and set a breakpoint at the function. Afterwards, I went online with the friends applet and a Pokemon game to see which location of the code was responsible for getting the NASC url for the friend services and games.`}</p>\n    <p>{`Indeed, they were different locations. I patched the code that gets the NASC url for game servers to use the test environment, instead of production. Then I patched the NASC test url to be a url that points to a server I control.`}</p>\n    <p>{`When I went online, my 3ds connected to the official friend servers and my unofficial Pokemon servers.`}</p>\n    <h2>{`Using a fake password`}</h2>\n    <p>{`The functions that use the `}<inlineCode parentName=\"p\">{`getNascUrl`}</inlineCode>{` function set up the HTTP request and call other functions to set up the request headers and body.`}</p>\n    <p>{`Having already built a NASC server based on sniffing traffic from my 3ds to the official NASC server, I was fairly familiar with the content in the request body. However there was one part I hadn't seen before: the request body would conditionally send the user password, which isn't behavior I had observed.`}</p>\n    <p>{`Incredibly roughly:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`void setNascBody(/* args */) {\n  // Add the normal fields to the request body\n\n  if (doesNotHaveUserId) {\n    getData(data);\n    setField(data, 'passwd');\n  } else {\n    // Set user Id and uid hmac\n  }\n}\n`}</code></pre>\n    <p>{`If the user does not have a user Id, it sends the password in the nasc request, otherwise it sends the user Id. I didn't look into that behavior much, but I imagine that's for development and testing purposes.`}</p>\n    <p>{`This was a great find because I didn't have to go digging for a place in FRD that uses the password.`}</p>\n    <p>{`I set a breakpoint at the instruction checking for a user Id and forced the condition to be true when the breakpoint was hit. I was able to confirm the value truly was the password used to connect online and got the location of memory that held the password.`}</p>\n    <p>{`I set a watchpoint at the location of memory holding the password to see when a routine accessed the password. When I went online in the Pokemon game, the watchpoint was hit, which gave me the routine responsible for using the password when games are connecting online. This was separate from the location used by the friend services.`}</p>\n    <p>{`I wrote a quick patch for games to reference a static string built into the patch rather than using the user's actual password. When I restarted my 3ds with the new patch, I connected to the official friend servers with my real password and my unofficial Pokemon servers with my fake password.`}</p>\n    <p>{`Having a plaintext password stored in a patch file is an obvious security risk, but considering a console with custom firmware can easily get the user's real password, there's not much that could be done either way. It protects the user's real password as best as possible while building and testing servers, which was the original goal.`}</p>\n    <h2>{`Running a fake NASC in the cloud`}</h2>\n    <p>{`Building an unofficial server locally is great for quick iterations, but the eventual goal is to run the server in the cloud for public access.`}</p>\n    <p>{`When reading through `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.3dbrew.org/wiki/Friend_Services\"\n      }}>{`3dbrew's friend services documentation`}</a>{`, I found out FRD uses three root certificate authorities to verify the NASC server is a Nintendo server.`}</p>\n    <p>{`I'm not going to go over how certificates work, just mention that they are used to verify the identity of an entity, such as a server. I highly recommend readers read up on how this works.`}</p>\n    <p>{`Since my server is not an official Nintendo server, my server would be rejected by FRD unless I told FRD to use a root CA that can verify my server's identity.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/devkitPro/libctru/\"\n      }}>{`Libctru`}</a>{` is an open source library that reimplements much of an official library used for 3ds software development. Many of the functions found in libctru interact with system modules to do tasks, such as making HTTP requests by talking with the HTTP system module.`}</p>\n    <p>{`While looking through libctru, I found a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/devkitPro/libctru/blob/0ed1f2beb22319c15714badcab7671fbf9c03377/libctru/source/services/httpc.c#L476-L490\"\n      }}>{`function that adds a root CA`}</a>{` to a request.`}</p>\n    <p>{`I found several functions in FRD that interact with the HTTP system module, but not one to add a custom root CA to a request. So I rewrote that function in my patch and had it use a root CA embedded within the patch.`}</p>\n    <p>{`A well known issue with the 3ds is that it does not support TLS 1.2. Unfortunately that means a NASC server currently needs to support the broken TLS 1.1. Hopefully a patch or reimplementation of the 3ds HTTPS communications can address this in the future. For now, it's something to be aware of when setting up a NASC server.`}</p>\n    <p>{`The fastest way I thought to test this patch was to get a makeshift NASC server running in AWS (a cloud provider) by having an API Gateway serve a static file from an S3 bucket containing a NASC response (the same response can be used repeatedly without issue).`}</p>\n    <p>{`I compiled my patch with the AWS root CA needed for the API Gateway, attempted to go online with Pokemon on my 3ds, and everything worked perfectly.`}</p>\n    <h2>{`Conclusion`}</h2>\n    <p>{`I have a patch with the ability to use the official servers and real password for friend services, use unofficial servers and a fake password for games, and use TLS when communicating with the unofficial NASC (granted, it's a broken version of TLS).`}</p>\n    <p>{`The patch is built with `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Kingcom/armips\"\n      }}>{`armips`}</a>{` and was designed for anyone building the patch to supply their own password, NASC url, and root CA. This should make it easy for any developer to build their own online systems, and have people test them safely.`}</p>\n    <p>{`Ideally for public use, a website would exist where a user could download a unique patch to connect to unofficial servers.`}</p>\n    <p>{`For better or for worse, an interesting side effect of the separation between auth servers and game servers is a potential central authority of unofficial 3ds accounts, and the central authority would not need to help maintain any game servers.`}</p>\n    <p>{`For example, a group of people could maintain the auth infrastructure for unofficial game servers, and individual developers or groups not related to the auth team could create unofficial servers. This would make it easier for unofficial servers to be created since one team of people wouldn't have to create and maintain everything themselves.`}</p>\n    <p>{`Thank you for reading this. You can find `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/zaksabeast/3ds-frd-unofficial-server-patch\"\n      }}>{`the final patch here`}</a>{` if you're interested to see how it works.`}</p>\n    <p>{`If anyone has any comments or questions, feel free to make a post on my blog's `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/zaksabeast/ZaksBlog/discussions\"\n      }}>{`discussion page`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}