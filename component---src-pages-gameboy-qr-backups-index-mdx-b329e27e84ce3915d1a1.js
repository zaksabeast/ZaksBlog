(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"3DVC":function(e,t,o){"use strict";o.r(t),o.d(t,"metadata",(function(){return b})),o.d(t,"_frontmatter",(function(){return d})),o.d(t,"default",(function(){return p}));o("rGqo"),o("yt8O"),o("Btvt"),o("RW0V"),o("91GP"),o("q1tI");var a=o("7ljp"),n=o("m+yu"),i=o("zZoO"),s=o.n(i),r=o("huep"),l=o.n(r);var c,b={title:"Backing up Gameboy saves with QR codes",description:"A fun proof of concept to back up data using only a flash cart",date:"02/7/2021"},d={},h=(c="Image",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",e)}),m={metadata:b,_frontmatter:d},u=n.a;function p(e){var t=e.components,o=function(e,t){if(null==e)return{};var o,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)o=i[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,["components"]);return Object(a.b)(u,Object.assign({},m,o,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",null,"Backing up GBC saves with QR codes"),Object(a.b)("p",null,"For Christmas I got an EZ-FLASH Junior: a Gameboy cartridge that can run home made software, often called homebrew, on a Gameboy. Naturally, I wanted to play with my new toy and needed to think of a homebrew to make."),Object(a.b)("p",null,"January was shaping up to be a busy month for me (in fact, I'm writing this post over a month late), so I needed something quick and small. As a result, any type of game was out of the question, which left only utility type tools."),Object(a.b)("p",null,"A common utility often provided by homebrew is a way to back up game saves. People love being able to store their saves on a computer for safe keeping in case something bad happens to their game or console. ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/FlagBrew/Checkpoint/"}),"Checkpoint")," is an excellent example of this. To use Checkpoint, someone puts a cartridge in their 3DS, runs Checkpoint from their SD card, and the cartridge save gets copied to the SD card."),Object(a.b)("p",null,"This is a little bit more difficult to do on a Gameboy. If the Gameboy runs homebrew from a cartridge, how can it run homebrew and read the save file from a game cart at the same time? Even if that was solved, where would it copy the save file to?"),Object(a.b)("p",null,"My idea was to write a tiny homebrew that could send a save over the Gameboy's serial port to something like a Teensy or Raspberry Pi. The homebrew would copy itself to the Gameboy's memory, then jump execution to its in-memory copy. At that point, the Gameboy would no longer be executing from the EZ-FLASH cartridge, so it could be replaced with a regular game. Once the game was inserted, a button could be pressed to start dumping the save."),Object(a.b)("p",null,"The general concept seemed reasonable, and seemed like it could be tweaked to apply cheat codes to a game rather than backing up data."),Object(a.b)("p",null,"Surely someone else had already thought of something similar to this. A quick google search brought me to a homebrew that uses this concept to dump the rom of a game cartridge - ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/Palmr/cart-dumper"}),"Palmr's cart-dumper"),"."),Object(a.b)("p",null,"My hopes of a project were dashed...until two wanted features caught my attention:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Dump save files (what I was really interested in)"),Object(a.b)("li",{parentName:"ul"},"Dump via QR Code")),Object(a.b)("p",null,"Pretty much every existing method to dump save data requires extra hardware. Dumping data with QR codes would provide a way to get game data without anything more than a single flash cart. This type of thing would make dumping Gameboy saves a lot more accessible to people."),Object(a.b)("p",null,"Plus, the idea just sounded really cool."),Object(a.b)("p",null,"I was going to get busy soon, so I was looking for a smaller project. Considering I knew very little about Gameboy homebrew and QR code encoding, this project was already shaping up to be fairly sizable. I decided my best course of action was to build a proof of concept, and maybe revisit this project in the future."),Object(a.b)("h2",null,"Practicality"),Object(a.b)("p",null,"This project had several challenges that I needed to overcome:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Writing a QR code encoder in z80 assembly (the Gameboy processor shares most of the z80's instructions)"),Object(a.b)("li",{parentName:"ul"},"Writing a small enough QR code encoder that it can fit in the Gameboy's limited memory"),Object(a.b)("li",{parentName:"ul"},"Writing an external app that could capture multiple QR codes and revert them back to a save dump")),Object(a.b)("p",null,"Before solving those, there was a bigger obstacle that might have made the whole project impractical to use."),Object(a.b)("p",null,"The Gameboy has a tiny screen, which means each QR code shown on a Gameboy can only hold a small amount of data. Would the number of QR codes to dump a game's save be such a high number that the feature wouldn't be reasonable to use?"),Object(a.b)("p",null,"The ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Game_Boy_Color"}),"Gameboy Color resolution is 160x144 pixels"),". I decided to assume an absolute best case scenario where each pixel on a Gameboy could represent a module of a QR code (a black or white square on a QR code). This was definitely stretching it, and probably wouldn't work, so if my practicality test failed with a best case scenario, there was no hope for a more realistic scenario."),Object(a.b)("p",null,"QR codes are square, so 144x144 pixels was my limit. QR codes need a bit of padding, so 141x141 pixels was my potential max size. Even then, that might not have been enough margin for a phone to recognize on a Gameboy's screen."),Object(a.b)("p",null,Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://blog.qr4.nl/page/QR-Code-Data-Capacity.aspx"}),"This QR code table")," showed 1,840 bytes was the most binary data a QR code of 141x141 modules could fit. A Pokemon Silver save file is 32,816 bytes, which would take 18 QR codes. That's actually pretty reasonable."),Object(a.b)("h2",null,"Worst case scenario"),Object(a.b)("p",null,"The best case scenario was stretching it for a number of reasons, so what about a worst case scenario?"),Object(a.b)("p",null,"The smallest QR code is 21x21 modules, which would mean each module could easily have multiple pixels on the Gameboy screen."),Object(a.b)("p",null,"QR codes have an error correction mechanic and different levels of error correction. The higher the error correction, the less data the QR code can hold. With the highest error correction, the smallest QR code can hold 7 bytes, which would take a Pokemon Silver save 4,688 QR codes. The lowest error correction would take 1,931 QR codes."),Object(a.b)("p",null,"While that might seem like a high number, I was actually encouraged. There's a community of Pokemon players who like to use the game's random number mechanics to get perfect, rare, special Pokemon without cheat devices. Many of these players manually advance the RNG with in-game mechanics until the RNG will produce the Pokemon they want. In the latest games, this comes in the form of \"Raid RNG\". For many people without special tools, less than 5,000 RNG advances is viewed as a worthy RNG."),Object(a.b)("p",null,"If gamers are willing to continuously increment an RNG 5,000 times to get a single Pokemon, surely they would not mind scanning less QR codes to redeem their save data off of a console they otherwise wouldn't be able to back up."),Object(a.b)("p",null,"On top of that, Gameboy games use a battery to persist save data, and the save data is lost once the battery runs dry. For anyone that somehow still has a working save (via replacement battery or magic), the limited time to immortalize their save is extra incentive to bear a few thousand QR codes."),Object(a.b)("p",null,"Even for a worst case scenario, this wasn't entirely unreasonable."),Object(a.b)("h2",null,"Starting a proof of concept"),Object(a.b)("p",null,"I've read a decent amount of z80 assembly to reverse engineer Pokemon games, and I've written a little bit to patch Pokemon games, so I wasn't going in completely blind. However I had never written a QR code encoder before. To learn about the format, I consulted various videos on Youtube."),Object(a.b)("p",null,"As one might expect, there's a decent amount involved with writing a QR code encoder. I decided to search for a z80 QR code encoder on the off chance someone had already written one. For one reason or another, ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/leiradel/qrc1"}),"leiradel wrote qrc1")," last year."),Object(a.b)("p",null,"As of this writing, the current version supports QR version 1 and 11 with medium error correction. The QR code table says a version 11 QR code holds 251 bytes when using medium error correction."),Object(a.b)("p",null,"leirade1 also included ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/leiradel/qrc1#qr-code-version-11"}),"instructions to use the library in other projects"),"! The interface is simple, and adding it to cart-dumper seemed like it wouldn't be much trouble at all."),Object(a.b)("p",null,"When I tried compiling cart-dumper with ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/gbdev/rgbds"}),"rgbds"),", I was met with a few errors. The last commit was about 2.5 years ago, so it probably needed updating."),Object(a.b)("p",null,"After a few tweaks, cart-dumper was running in an emulator and my physical Gameboy Color. I was able to start adding the z80 QR library."),Object(a.b)("h2",null,"Running qrc1 on a Gameboy"),Object(a.b)("p",null,"The z80 QR code encoder has all the logic to encode QR codes, but how each device draws to a screen is potentially different. To accomodate this, someone using qrc1 needs to implement a few routines: ",Object(a.b)("inlineCode",{parentName:"p"},"qrc_pixel_up"),", ",Object(a.b)("inlineCode",{parentName:"p"},"qrc_pixel_down"),", ",Object(a.b)("inlineCode",{parentName:"p"},"qrc_pixel_left"),", ",Object(a.b)("inlineCode",{parentName:"p"},"qrc_pixel_right"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"qrc_invert_pixel"),"."),Object(a.b)("p",null,"Before hooking up the drawing, I wanted to make sure adding qrc1 to cart-dumper would still compile and work in the Gameboy's limited memory."),Object(a.b)("p",null,"The Gameboy processor is very similar to the z80, but there are a few differences. Most notably, a few instructions and registers are missing, which happen to be used by qrc1, so I had to modify qrc1 to work with the Gameboy's processor."),Object(a.b)("p",null,"Once that was done, I added qrc1 to cart-dumper without the ability to render QR codes. Even with the QR code encoder added, cart-dumper was still able to function normally from the Gameboy's memory."),Object(a.b)("h2",null,"Rendering graphics on a Gameboy"),Object(a.b)("p",null,"The Gameboy renders in tiles rather than pixels. Each tile is 8x8 pixels, and the Gameboy can render 18x20 tiles on its screen. This is the reason many games will have sprites that look rather boxy and fit in a square or rectangular area."),Object(a.b)("p",null,"If each tile was one QR module, I could only fit a QR code the size of 18x18 modules, which is smaller than a version 1 QR. For this reason, I needed each tile to fit multiple QR modules."),Object(a.b)("p",null,"Since each tile is 8x8 pixels, a QR module represented as a 4x4 pixel block would allow 4 modules to fit in a single tile. For each tile to represent multiple QR modules, I needed a tile for every single possible combination of QR modules within a single tile."),Object(a.b)("p",null,"The Gameboy has a special section of memory to hold the active tile set that can be rendered on the screen. The active tile memory has a finite number of tiles it can hold. For example, in order for a game to render a forest scene, it will probably store a different set of tiles in the active tile memory than if the game rendered the inside of a house."),Object(a.b)("p",null,"A QR code being rendered will need access to the same set of tiles, so the amount of modules I could fit into a single tile was limited by the amount of tiles the Gameboy could hold in the active tile memory."),Object(a.b)("h2",null,"Issues with QR version 11 on a Gameboy"),Object(a.b)("p",null,"QR version 11 holds more data than QR version 1, so I thought it would be good to look into QR11 first."),Object(a.b)("p",null,"QR11 can be represented with 61x61 pixels, which technically fits inside the Gameboy's 160x144 pixels screen, but because the Gameboy renders in tiles, I needed to see if the Gameboy's active tile memory could hold enough tiles for every required permutation of QR modules within a tile."),Object(a.b)("p",null,"For the best case scenario, I assumed this would run on a Gameboy Color, which can hold 512 tiles in the active tile memory."),Object(a.b)("p",null,"In order for each module of the QR code to map to a pixel on the Gameboy screen (a 1 to 1 ratio), every single permutation of pixels being black or white on the 8x8 grid would need to be possible. 8","*","8 = 64 pixels, and 2^64 tiles is far greater than 512, so that wasn't possible."),Object(a.b)("p",null,"Doubling the size of the QR11 would take 122x122 pixels, which would still fit on the Gameboy's screen. This size would make each QR module fit in a 4x4 pixel space. Sadly, 4","*","4 = 16, and 2^16 = 65,536 - still well over the 512 available tiles."),Object(a.b)("p",null,"A module of 2x2 would use few enough tiles: 2","*","2 = 4, and 2^4 = 16. 16 is much less than 512. However that would make the QR code 4 times its original size, for a total of 244x244 pixels, which is larger than the Gameboy's 160x144 pixels screen size."),Object(a.b)("p",null,"At first, a QR11 didn't look to be possible on the Gameboy. Although various games made at that time were known for their clever ways of working around regular limitations. Perhaps there was a trick to render pixels anywhere on the screen?"),Object(a.b)("h2",null,"All points accessible graphics"),Object(a.b)("p",null,Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://www.reddit.com/r/Gameboy/comments/1s283r/best_tools_for_homebrew_gbgbc_development/cdv0nmo?utm_source=share&utm_medium=web2x&context=3"}),"This post of reddit"),' was asking that exact question. As it turns out, there is a way to do it. The ability to do this is known as "All Points Accessible Graphics".'),Object(a.b)("p",null,"By assigning a unique tile to each position on the Gameboy's screen and editing the tile contents live, the Gameboy can have arbitrary pixels rendered to it."),Object(a.b)("p",null,"The Gameboy screen is limited to 18x20 tiles, which amounts to 360 total tiles. The 512 active tile limit of the Gameboy Color fits this use case perfectly. The original Gameboy has a limit of 256 tiles, but the reddit post also listed a second trick to give the console access to 384 tiles."),Object(a.b)("p",null,"A homebrew called ucity happened to have an ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/AntonioND/ucity/blob/master/docs/apa-graphics.rst"}),"all points accessible graphics library"),", and included usage documentation."),Object(a.b)("p",null,"With time running low, I was put in a bit of a bind. The Gameboy Color can run code intended to run on the original Gameboy, but the original Gameboy cannot run code intended only to run on a Gameboy Color."),Object(a.b)("p",null,"Cart-dumper was built to only work for the original Gameboy, not the Gameboy Color, but ucity's APA library only supported the Gameboy Color. I read through documentation to figure out the differences between Gameboy and Gameboy Color games, and played with a few changes in emulators to see the differences."),Object(a.b)("p",null,"Ultimately, I decided it wasn't worth my limited time to update cart-dumper to a Gameboy Color homebrew, especially with my limited knowledge of Gameboy homebrew."),Object(a.b)("p",null,"Since my current focus was just a proof of concept, I decided to stick with QR version 1."),Object(a.b)("h2",null,"Drawing a QR version 1 on the Gameboy"),Object(a.b)("p",null,"Since QR1 uses 21x21 modules, I was able to render each module with a 2x2 square of pixels. With each tile on a Gameboy using 8x8 pixels, I needed to create tiles that would support a square of 4x4 modules. 2^4 = 16, so I needed 16 variations of tiles."),Object(a.b)("p",null,"Qrc1 draws QR codes by moving a cursor around the screen and inverting modules from black to white or white to black. I needed a way to take the (X,Y) coordinates qrc1 was drawing to, map it to a specific Gameboy tile on the screen, calculate which module within the tile needed to be inverted, then calculate the new tile."),Object(a.b)("p",null,"Think of the Gameboy screen as a grid of tiles:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),"Axis  X  |  0      |  1      |  2      |\nY        |         |         |         |\n---------|---------|---------|---------|\n0        | Tile 0  | Tile 1  | Tile 2  |\n         |         |         |         |\n---------|---------|---------|---------|\n1        | Tile 3  | Tile 4  | Tile 5  |\n         |         |         |         |\n---------|---------|---------|---------|\n")),Object(a.b)("p",null,"Each tile needed to be broken into four modules:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),"Axis  X  |  0      |  1      |  2      |\nY        |         |         |         |\n---------|---------|---------|---------|\n0        |  0 | 1  |  0 | 1  |  0 | 1  |\n         |  2 | 3  |  2 | 3  |  2 | 3  |\n---------|---------|---------|---------|\n1        |  0 | 1  |  0 | 1  |  0 | 1  |\n         |  2 | 3  |  2 | 3  |  2 | 3  |\n---------|---------|---------|---------|\n")),Object(a.b)("p",null,"To qrc1, this looked like:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),"Axis  X  |  0 |  1  |  2 |  3  |  4 |  5  |\nY        |    |     |    |     |    |     |\n---------|----|-----|----|-----|----|-----|\n0        |  0 |  1  |  2 |  3  |  4 |  5  |\n---------|----|-----|----|-----|----|-----|\n1        |  6 |  7  |  8 |  9  | 10 | 11  |\n---------|----|-----|----|-----|----|-----|\n2        | 12 | 13  | 14 | 15  | 16 | 17  |\n---------|----|-----|----|-----|----|-----|\n3        | 18 | 19  | 20 | 21  | 22 | 23  |\n---------|----|-----|----|-----|----|-----|\n")),Object(a.b)("p",null,"Qrc1's X and Y values were each a single byte, since QR version 1 uses 21 modules. Given (X,Y), I needed to locate a specific module within a specific tile of the Gameboy's screen."),Object(a.b)("p",null,"The method I devised broke each byte into two pieces. Bits 1-7 were the X or Y tile position, and bit 0 determined the module (left/right for X and top/bottom for Y)."),Object(a.b)("p",null,"A QR module coordinate of (10,21) would be calculated like this:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),"10 is 00001010 in binary\n21 is 00010101 in binary\n\nTile     Module\n----------------\n0000101  0\n0001010  1\n\n0000101 is 5\n0001010 is 10\n")),Object(a.b)("p",null,"The tile coordinates would be (5,10)."),Object(a.b)("p",null,"The module bits are concatenated together to make ",Object(a.b)("inlineCode",{parentName:"p"},"10")," in binary or 2 in decimal, which corresponded to one of the modules within the tile:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),"| 0 | 1 |\n| 2 | 3 |\n")),Object(a.b)("p",null,"In this example, the module was 2, so it would invert the color of module 2 in tile (5,10)."),Object(a.b)("p",null,"With 16 tiles representing all permutations of QR modules, I assigned each tile a number 0-15. The binary representation of those numbers is ",Object(a.b)("inlineCode",{parentName:"p"},"0000-1111"),". Each bit in a tile's Id corresponds to a module within the tile. The module is white if the corresponding bit is ",Object(a.b)("inlineCode",{parentName:"p"},"0")," and black if it is ",Object(a.b)("inlineCode",{parentName:"p"},"1"),"."),Object(a.b)("p",null,"For example, ",Object(a.b)("inlineCode",{parentName:"p"},"1100")," represents:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),"| W | W |\n| B | B |\n")),Object(a.b)("p",null,"And ",Object(a.b)("inlineCode",{parentName:"p"},"1010")," represents:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),"| W | B |\n| W | B |\n")),Object(a.b)("p",null,"To invert the lower left corner of ",Object(a.b)("inlineCode",{parentName:"p"},"1010"),", I would shift 1 by the module number (2) and XOR it with the tile's bit representation:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),"1 << 2 = 4\n\n4's binary representation is 0100\n\n1010 ^ 0100 = 1110\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"1110")," is the tile:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),"| W | B |\n| B | B |\n")),Object(a.b)("p",null,"The lower left corner has been successfully inverted."),Object(a.b)("p",null,"This was a very simple method of inverting tiles, which made implementating it pretty easy."),Object(a.b)(h,{src:s.a,mdxType:"Image"}),Object(a.b)("p",null,"And just like that, it was working."),Object(a.b)("h2",null,"Dumping Pokemon from a Pokemon Red save"),Object(a.b)("p",null,"For a proof of concept, I decided not to dump an entire save. The most valuable part of my Pokemon saves aren't the accomplishments in the game, but the Pokemon I've captured. As a result, I decided to dump a Pokemon from my Red version. This removed the need to scan lots of QR codes while testing."),Object(a.b)("p",null,"To add save dumping to cart-dumper, I referenced ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://b13rg.github.io/Gameboy-Bank-Switching/"}),"this documentation"),", and had it added quickly (and a bit hackily)."),Object(a.b)("p",null,"With my limited time to work on this proof of concept, I wanted to avoid writing an entire mobile app that could scan multiple binary QR codes and save them as a single file. Most smartphone QR scanners read text for displaying, not raw data for saving, so I wrote a z80 utility function to convert bytes to UTF8 encoded hex bytes. This allowed me to scan the QR codes with my phone's built in QR scanner."),Object(a.b)("p",null,"I copied the bytes from my phone, assembled them in a hex editor, and loaded it into PKHeX to verify the data was dumped successfully."),Object(a.b)(h,{src:l.a,mdxType:"Image"}),Object(a.b)("p",null,"Perfect, it worked!"),Object(a.b)("h2",null,"Conculsion"),Object(a.b)("p",null,"At some point I should make a pull request to cart-dumper so it can be compiled with the latest version of rgbds - I feel bad that I have those changes, but haven't contributed them upstream yet."),Object(a.b)("p",null,"In the future I might clean up my code and flesh out a more stable QR dumper as well. There were a few times my phone had trouble scanning QR codes, and I'm not sure if it was due to a bug or the difficulty of scanning a QR code from a Gameboy's dim, older, reflective screen."),Object(a.b)("p",null,"For something as simple as a Pokemon, it's probably more practical to print the bytes to the user and have them type it onto a computer. However as a proof of concept to dump entire save files, this was more successful than I thought it would be."),Object(a.b)("p",null,"If anyone has any comments, questions, or is interested in picking up where I left off, feel free to make a post on my blog's ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/zaksabeast/ZaksBlog/discussions"}),"discussion page"),"."))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-gameboy-qr-backups-index-mdx-b329e27e84ce3915d1a1.js.map