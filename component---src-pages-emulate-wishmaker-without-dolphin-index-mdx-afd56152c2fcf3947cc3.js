(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{dX70:function(e,t,n){"use strict";n.r(t),n.d(t,"metadata",(function(){return o})),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return c}));n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("91GP"),n("q1tI");var a=n("7ljp"),r=n("m+yu");var o={title:"Emulating Wishmaker without Dolphin",description:"Writing a patch to get a Wishmaker Jirachi on emulator without Dolphin",date:"01/02/2021"},i={},s={metadata:o,_frontmatter:i},l=r.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(l,Object.assign({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",null,"Emulating Wishmaker without Dolphin"),Object(a.b)("p",null,"In the early 2000's, there were a few Pokemon that couldn't be obtained through the normal gameplay of a Gameboy Advance Pokemon game. Most of those Pokemon could only be obtained through time specific events, such as going to a live event, so they can no longer be obtained today."),Object(a.b)("p",null,"One of the very few that is still obtainable is the Wishmaker Jirachi. The Wishmaker is obtained from a Gamecube disc that came with the preorder of Pokemon Colosseum."),Object(a.b)("p",null,"The setup to get the Jirachi can be bit tedious. A player needs to dust off their old Gamecube, find a Gameboy Advance to Gamecube link cable, hope their Colosseum bonus disc still works, etc."),Object(a.b)("p",null,"In this case, emulators are even more tedious to set up. Connecting a Gamecube and Gameboy Advance emulator is a very niche use case that is finnicky at best and often doesn't work. Besides that, many people don't have a computer strong enough to run a Gamecube emulator."),Object(a.b)("p",null,"There's a specific Pokemon community that enjoys manipulating the random number generation in Pokemon games for challenging gameplay with extra rewards. They'll often use emulators for the extra benefits emulators can provide, so the difficulties of getting a Wishmaker Jirachi on an emulator is a bit of a pain point."),Object(a.b)("p",null,"Since I was already digging into how the Wishmaker multiboot rom worked to build a portable Wishmaker distributor, I figured I would do one other Wishmaker project: get Wishmaker to run on a Gameboy Advance emulator without a Gamecube emulator."),Object(a.b)("p",null,"In my last post, I described how the logic of creating and saving a Jirachi happens on the Gameboy Advance and how the Gamecube is purely used to put the Wishmaker multiboot rom on the Gameboy Advance. If the multiboot rom is loaded directly into an emulator, a Gamecube emulator should be completely uncessary."),Object(a.b)("p",null,"Ideally a user should only need:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"A Gameboy Advance emulator"),Object(a.b)("li",{parentName:"ul"},"The Wishmaker multiboot rom"),Object(a.b)("li",{parentName:"ul"},"The save file of a Pokemon game they want Jirachi added to")),Object(a.b)("h2",null,"Why am I writing this?"),Object(a.b)("p",null,"This patch didn't take long to make. In fact, I spent significantly more time writing this blog post than I did writing the patch."),Object(a.b)("p",null,"I'm writing this because there's a decent amount of discovery that goes into reverse engineering software, a process most people never see or hear about, and recently I've wanted to share these adventures more often."),Object(a.b)("p",null,"Entire books could be written about reverse engineering small fragments of code, so this post is barely going to scratch the tip of the iceberg."),Object(a.b)("p",null,"Because this post is going to be pretty lengthy already, I'm only going to focus on the Jirachi mechanics and won't be talking about the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://www.serebii.net/rubysapphire/berryglitch.shtml"}),"berry glitch")," mechanics."),Object(a.b)("h2",null,"Loading a Pokemon save"),Object(a.b)("p",null,"Normally the Wishmaker rom expects a cartridge inserted into the Gameboy Advance so it can access the save file on the cartridge."),Object(a.b)("p",null,"To an emulator, the game and save normally found on the cartridge can be two completely separate pieces of data, so the emulator should be able to load a Pokemon Ruby/Sapphire save without a Pokemon Ruby/Sapphire game."),Object(a.b)("p",null,"When an emulator loads a game, it usually loads a save file with the same name, but with a ",Object(a.b)("inlineCode",{parentName:"p"},".sav")," extension. For example, if the Wishmaker multiboot rom is called ",Object(a.b)("inlineCode",{parentName:"p"},"wishmaker.bin"),", then most emulators will try to load ",Object(a.b)("inlineCode",{parentName:"p"},"wishmaker.sav"),"."),Object(a.b)("p",null,"Using the method described in my last blog post, I had already extracted the Wishmaker multiboot rom. From there, I used my Wii with ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/FIX94/gba-link-cable-dumper"}),"gba-link-cable-dumper")," to extract a save file from a Pokemon Ruby cartridge."),Object(a.b)("p",null,"By naming the Ruby save to ",Object(a.b)("inlineCode",{parentName:"p"},"wishmaker.sav"),", the emulator loaded my Pokemon Ruby save as if it was coming from an inserted cartridge."),Object(a.b)("h2",null,"Incompatible games"),Object(a.b)("p",null,"It's widely known the Wishmaker Jirachi can only be sent to two games: Pokemon Ruby and Pokemon Sapphire. It would be a big problem if Wishmaker tried to overwrite data for a completely different game by mistake."),Object(a.b)("p",null,"Because Wishmaker checks to make sure the inserted game is Pokemon Ruby or Sapphire, but the rom running on the emulator is Wishmaker, I needed to find where Wishmaker checks the inserted cartridge and patch it to think a valid cartridge is always inserted."),Object(a.b)("h2",null,"Finding the game check"),Object(a.b)("p",null,"One of the initial Wishmaker routines ",Object(a.b)("em",{parentName:"p"},"very")," roughly looks like:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),"// Called from the main loop\nvoid runApp() {\n  setUpGraphics();\n\n  gamecubeHandshake();\n\n  u32 result = transferJirachiAndFixBerryGlitch();\n\n  switch (result) {\n    case 0:\n      printSuccessToUser();\n      break;\n    // Handle error cases and send errors to Gamecube\n  }\n\n  freezeExectution();\n}\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"transferJirachiAndFixBerryGlitch")," does a few things:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Transfers the Jirachi"),Object(a.b)("li",{parentName:"ul"},"Updates save checksums"),Object(a.b)("li",{parentName:"ul"},"Prints Jirachi transfer errors to the user")),Object(a.b)("p",null,"That last thing was particularly helpful. Text such as a URL, debug info, or strings displayed to a user is valuable information to determine what the relative logic is doing."),Object(a.b)("p",null,"The original function to print errors looked something like this:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),'void printTransferErrorToScreen(u32 r0) {\n    char *text;\n\n    switch (r0) {\n    case 1:\n        text = "Error:\\n  There is no save file.";\n        break;\n    case 2:\n        text = "Error:\\n The save file is corrupted.";\n        break;\n    // etc.\n    }\n\n    printCenteredText(text, 1, 2, 27, 7, 0);\n}\n')),Object(a.b)("p",null,"The value passed into this function is the result of the transfer. Because the errors are written in human-readable text, I was able to create an enum that described all possible outcomes of a transfer (including all reasons for failure):"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),'enum TransferResult {\n  SUCCESS = 0x1,\n  NO_SAVE = 0x2,\n  CORRUPTED_SAVE = 0x3,\n  GAME_NOT_NA = 0x4,\n  NO_SAVE_2 = 0x5,\n  SAVE_FAILURE = 0x6,\n  NO_POKEDEX = 0x7,\n  PARTY_IS_FULL = 0x8,\n  CORRUPTED_SAVE_2 = 0x9,\n  ALREADY_RECEIVED_JIRACHI = 0xA,\n  VERSION_NOT_COMPATIBLE = 0xB\n};\n\nvoid printTransferErrorToScreen(enum TransferResult transferResult) {\n    char *error;\n\n    switch (transferResult) {\n    case NO_SAVE:\n        error = "Error:\\n  There is no save file.";\n        break;\n    case CORRUPTED_SAVE:\n        error = "Error:\\n The save file is corrupted.";\n        break;\n    case GAME_NOT_NA:\n        error = "Error: Unable to transfer\\nJIRACHI to a Pok\\x1bmon Ruby\\nor Sapphire Game Pak that\\nis not aNorth American\\nversion.";\n        break;\n    case NO_SAVE_2:\n        error = "Error:\\n  There is no save file.";\n        break;\n    case SAVE_FAILURE:\n        error = "Error: Save failure.";\n        break;\n    case NO_POKEDEX:\n        error = "Error:\\n You don\\\'t have a POK\\x1bDEX.\\n You cannot receive JIRACHI\\n as a gift right now.\\n";\n        break;\n    case PARTY_IS_FULL:\n        error = "Error:\\n Your Pok\\x1bmon party is full.";\n        break;\n    case CORRUPTED_SAVE_2:\n        error = "Error:\\n The save file is corrupted.";\n        break;\n    case ALREADY_RECEIVED_JIRACHI:\n        error = "Error:\\nYou already have been given\\nJIRACHI as a gift. You can\\nonly receive one JIRACHI\\nperGame Pak.";\n        break;\n    case VERSION_NOT_COMPATIBLE:\n        error = "Error:\\n This version is not\\n    compatible.";\n        break;\n    default:\n        return;\n    }\n\n    printCenteredText(error, 1, 2, 27, 7, 0);\n}\n')),Object(a.b)("p",null,"With that, I had all the possible ways the app could fail. I named the function responsible for creating the transfer result ",Object(a.b)("inlineCode",{parentName:"p"},"transferJirachi"),", and took a look at what it does. It roughly looks like:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),"enum TransferResult transferJirachi() {\n  u8 func1Result = func1();\n\n  GLOBAL_1 = func1Result;\n\n  if (func1Result != 0x11) {\n    return VERSION_NOT_COMPATIBLE;\n  }\n\n  // etc.\n}\n")),Object(a.b)("p",null,"The very first thing that happens is ",Object(a.b)("inlineCode",{parentName:"p"},"func1")," creates ",Object(a.b)("inlineCode",{parentName:"p"},"func1Result"),", which can cause a ",Object(a.b)("inlineCode",{parentName:"p"},"VERSION_NOT_COMPATIBLE")," error. ",Object(a.b)("inlineCode",{parentName:"p"},"func1")," must get a game code, and ",Object(a.b)("inlineCode",{parentName:"p"},"func1Result")," must be the game code:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),"enum TransferResult transferJirachi() {\n  u8 gameCode = getGameCode();\n\n  G_GAME_CODE = gameCode;\n\n  if (gameCode != 0x11) {\n    return VERSION_NOT_COMPATIBLE;\n  }\n\n  // etc.\n}\n")),Object(a.b)("p",null,"At this point it would have been simple to patch out the check entirely so the ",Object(a.b)("inlineCode",{parentName:"p"},"VERSION_NOT_COMPATIBLE")," error would be impossible to get, but there were at least a few reasons why I felt patching ",Object(a.b)("inlineCode",{parentName:"p"},"getGameCode")," would be better:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"The multiboot rom was setting global variables everywhere, so understanding ",Object(a.b)("inlineCode",{parentName:"li"},"getGameCode")," might help reverse engineer other routines"),Object(a.b)("li",{parentName:"ul"},"It looked like ",Object(a.b)("inlineCode",{parentName:"li"},"getGameCode")," was only used in this one location, but the patch would fail if that assumption was incorrect (which would cause uncessary debugging and reverse engineering work)"),Object(a.b)("li",{parentName:"ul"},"The intent of the patch was not to remove the single game check, but to make Wishmaker think a legitimate game was inserted, no matter the reason. Because of this, patching the underlying logic was the correct approach")),Object(a.b)("h2",null,"Getting the game code"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"getGameCode")," roughly looks like:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),'u32 getGameCode() {\n  u32 titleId = 0;\n\n  dmaCopy(&titleId, ROM_TITLE_ID_LOCATION, 4);\n\n  u32 titleIdWithoutLanguage = trimLanguage(titleId);\n\n  bool isSapphire = strcmp(titleIdWithoutLanguage, "AXP") == 0;\n  bool isRuby = strcmp(titleIdWithoutLanguage, "AXV") == 0;\n\n  if (isSapphire || isRuby) {\n    bool isJapaneseSapphire = strcmp(titleId, "AXPJ") == 0;\n    bool isJapaneseRuby = strcmp(titleId, "AXVJ") == 0;\n\n    if (isJapaneseSapphire || isJapaneseRuby) {\n      return 0x10;\n    }\n\n    bool isEnglishSapphire = strcmp(titleId, "AXPE") == 0;\n    bool isEnglishRuby = strcmp(titleId, "AXVE") == 0;\n\n    if (isEnglishSapphire || isEnglishRuby) {\n      return 0x11;\n    }\n\n    return 0x12;\n  }\n\n  // Same checks for Fire Red and Leaf Green\n\n  // Same checks for a third time, but only for language instead of a specific game\n}\n')),Object(a.b)("p",null,"Title Ids are unique codes given to each game. ",Object(a.b)("inlineCode",{parentName:"p"},"strcmp")," was very obviously comparing strings, so it and all the variable names were pretty easy to label."),Object(a.b)("p",null,"If the result of this function is not 0x11 (English Ruby or Sapphire), ",Object(a.b)("inlineCode",{parentName:"p"},"transferJirachi")," will return the ",Object(a.b)("inlineCode",{parentName:"p"},"VERSION_NOT_COMPATIBLE")," error. As long as this function returns 0x11, the check will always succeed."),Object(a.b)("p",null,"I made the patch by jumping straight to the ",Object(a.b)("inlineCode",{parentName:"p"},"return 0x11")," statement. ",Object(a.b)("inlineCode",{parentName:"p"},"getGameCode")," effectively became:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),"u32 getGameCode() {\n  return 0x11; // English Ruby or Sapphire\n}\n")),Object(a.b)("p",null,"Fun fact: A long time ago I read there was evidence Pokemon Fire Red and Leaf Green might have also been planned to receive the Wishmaker Jirachi at some point. This function checks the title Ids for Fire Red and Leaf Green, which does indeed seem to indicate they also might have been planned to get Jirachi earlier in development."),Object(a.b)("p",null,"This was both fun and heartbreaking to find."),Object(a.b)("h2",null,"Other potential issues"),Object(a.b)("p",null,"The transfer result enum showed where the Pokemon Ruby and Sapphire check existed, but it also gave some more info: a list of all other possible issues."),Object(a.b)("p",null,"This is the list of potential issues:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"No Pokedex"),Object(a.b)("li",{parentName:"ul"},"Already received Jirachi"),Object(a.b)("li",{parentName:"ul"},"Party is full"),Object(a.b)("li",{parentName:"ul"},"Game isn't North American"),Object(a.b)("li",{parentName:"ul"},"Game not compatible"),Object(a.b)("li",{parentName:"ul"},"No save"),Object(a.b)("li",{parentName:"ul"},"No save (2)"),Object(a.b)("li",{parentName:"ul"},"Corrupted save"),Object(a.b)("li",{parentName:"ul"},"Corrupted save (2)"),Object(a.b)("li",{parentName:"ul"},"Save failure")),Object(a.b)("p",null,"When a player starts a Pokemon journey, they get a Pokedex to catalogue all the Pokemon they've seen and caught. A player receives their Pokedex after choosing their first Pokemon, and can hold up to 6 Pokemon at a time for battling other Pokemon. Any other Pokemon must be in a special in-game storage."),Object(a.b)("p",null,"The first three potential problems all relate to those mechanics:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"A player needs a Pokedex to receive Jirachi"),Object(a.b)("li",{parentName:"ul"},"A player can only receive one Jirachi"),Object(a.b)("li",{parentName:"ul"},"The Jirachi is put in the player's party, so the Player can only hold 1-5 Pokemon to get a Jirachi")),Object(a.b)("p",null,"All of those issues could be ignored. If the game runs into any of those issues it means the Wishmaker rom is trying to transfer the Jirachi, so any patches I wrote must have been successful."),Object(a.b)("p",null,"The next two issues involve the game check that I already patched out, so they could also be ignored."),Object(a.b)("p",null,"The final five issues all seemed valid as well. A game without a save can't get a Jirachi, and a corrupted save shouldn't be modified since it's broken. If the save failed for any reason, something went wrong and the user should know."),Object(a.b)("p",null,'What I found odd was how there were two identical "No save" and two identical "Corrupted save" errors. There\'s no reason to have two different failure results for one purpose. If the save truly was corrupted, the development team would have only needed one "save corrupted" error, not two.'),Object(a.b)("p",null,"This begs the juicy question: what reasons for failure did the development team not want users to be aware of?"),Object(a.b)("h2",null,"Save handling"),Object(a.b)("p",null,"The remainder of ",Object(a.b)("inlineCode",{parentName:"p"},"transferJirachi")," ",Object(a.b)("em",{parentName:"p"},"very")," roughly looks like:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),"enum TransferResult transferJirachi() {\n  // Game version check\n\n  func1();\n\n  if (func2() == false) {\n    return CORRUPTED_SAVE_2;\n  }\n\n  u32 func3Result = func3();\n\n  if (func3Result != 1) {\n    return func4(func3Result, 0);\n  }\n\n  // Checks and error handling for everything not related to Pokemon Ruby/Sapphire or the save\n\n  return func5();\n}\n")),Object(a.b)("p",null,"If ",Object(a.b)("inlineCode",{parentName:"p"},"func4")," is returned from ",Object(a.b)("inlineCode",{parentName:"p"},"transferJirachi"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"transferJirachi")," returns ",Object(a.b)("inlineCode",{parentName:"p"},"TransferResult"),", then ",Object(a.b)("inlineCode",{parentName:"p"},"func4")," must also return a ",Object(a.b)("inlineCode",{parentName:"p"},"TransferResult"),"."),Object(a.b)("p",null,"A quick peek at ",Object(a.b)("inlineCode",{parentName:"p"},"func4")," showed it could return ",Object(a.b)("inlineCode",{parentName:"p"},"NO_SAVE_2"),", ",Object(a.b)("inlineCode",{parentName:"p"},"CORRUPTED_SAVE_2"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"CORRUPTED_SAVE"),"."),Object(a.b)("p",null,"I deduced the following from this structure:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"func2")," has to do with some sort of save validation since it causes the ",Object(a.b)("inlineCode",{parentName:"li"},"CORRUPTED_SAVE_2")," error"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"func4")," creates save related errors based off the result of ",Object(a.b)("inlineCode",{parentName:"li"},"func3"),", so ",Object(a.b)("inlineCode",{parentName:"li"},"func3")," must have something to do with saves too"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"func1")," occurs before any of the save-related functions and doesn't have a return value, so it must be setting up something related to saves"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"func5")," only runs after all possible checks to transfer the Jirachi have passed, so it's responsible for creating and saving the Jirachi")),Object(a.b)("p",null,"The original psuedo-code with labels:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),"enum TransferResult transferJirachi() {\n  // Game version check\n\n  configureSaveStuff();\n\n  if (validateSave() == false) {\n    return CORRUPTED_SAVE_2;\n  }\n\n  u32 saveResult = getSaveResult();\n\n  if (saveResult != 1) {\n    return convertSaveErrorToTransferError(saveResult, 0);\n  }\n\n  // Checks and error handling for everything not related to Pokemon Ruby/Sapphire or the save\n\n  return createAndSaveJirachi();\n}\n")),Object(a.b)("p",null,"As far as I could tell, there was no way to get the ",Object(a.b)("inlineCode",{parentName:"p"},"NO_SAVE")," error, so the development team removed whatever would explicitly cause that. But again, ",Object(a.b)("inlineCode",{parentName:"p"},"convertSaveErrorToTransferError")," returning both ",Object(a.b)("inlineCode",{parentName:"p"},"CORRUPTED_SAVE_2")," and ",Object(a.b)("inlineCode",{parentName:"p"},"CORRUPTED_SAVE")," seemed suspicious and worth investigating."),Object(a.b)("h2",null,"Save blocks and offsets"),Object(a.b)("p",null,"I've worked with Gameboy Advances Pokemon save files in the past, and already knew a decent amount about their structure. The save files are actually two saves: the most recent save, and a backup in case the most recent save gets corrupted. Each save is broken into 16 blocks, and each block holds data related to each other in some way. Only 14 of the blocks are used for Ruby, Sapphire, and Emerald."),Object(a.b)("p",null,"The amount of data in each block is important: it's used to calculate the checksum of a block and verify the block hasn't been corrupted. Each block can store a maximum of 0xF80 bytes, but the actual space used varies between games."),Object(a.b)("p",null,"Bulbapedia has the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://bulbapedia.bulbagarden.net/wiki/Save_data_structure_in_Generation_III#Section_ID"}),"size and description of each block"),", which I figured would be good to reference. Since Bulbapedia's sizes are for Pokemon Emerald, not Ruby or Sapphire, I also found a list of block sizes for the other games ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://projectpokemon.org/home/forums/topic/35903-gen-3-mystery-eventgift-research/?do=findComment&comment=197751"}),"in this post on ProjectPokemon"),"."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"configureSaveStuff")," roughly looks like:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),"void configureSaveStuff() {\n  bool isENGOrJPNRubySapphire = G_GAME_CODE <= 0x11;\n\n  if (isENGOrJPNRubySapphire) {\n    // Not shown: Store hardcoded save offsets, such as the pokdex and party offsets, to global variables\n\n    // Store block sizes to global variables\n    G_SAVE_BLOCK_0_SIZE = 0x890;\n    G_SAVE_BLOCK_4_SIZE = 0xC40;\n  } else {\n    // Read values from the rom and save those values in the same globals as above\n    // This includes G_SAVE_BLOCK_0_SIZE, and G_SAVE_BLOCK_4_SIZE\n  }\n\n  for (u32 i = 0; i < 14; i++) {\n    if (i == 0) {\n      SOME_GLOBAL[0] = G_SAVE_BLOCK_0_SIZE;\n    } else if (i == 4) {\n      SOME_GLOBAL[4] = G_SAVE_BLOCK_4_SIZE;\n    } else {\n      SOME_GLOBAL[i] = 0xF80;\n    }\n  }\n}\n")),Object(a.b)("p",null,"The top part was setting offsets to various parts of the save file, as well as the size of blocks 0 and 4."),Object(a.b)("p",null,"If the game was an English or Japanese Ruby or Sapphire, Wishmaker used hardcoded save offsets. Any other game would read the save offsets and block sizes from the game cartridge."),Object(a.b)("p",null,"The remaining logic seemed to loop once per used save block and set the save size of the block, so I renamed ",Object(a.b)("inlineCode",{parentName:"p"},"SOME_GLOBAL")," to ",Object(a.b)("inlineCode",{parentName:"p"},"G_SAVE_BLOCK_SIZES")," and ",Object(a.b)("inlineCode",{parentName:"p"},"configureSaveStuff")," to ",Object(a.b)("inlineCode",{parentName:"p"},"configureSaveOffsetsAndBlockSizes"),". It's not a great name, but it certainly is descriptive."),Object(a.b)("p",null,"In my last blog post, I mentioned a prototype of the multiboot rom that was made in 2003. Pokemon Fire Red and Leaf Green were first released in 2004, so there's a strong chance the Wishmaker multiboot rom was in development at the same time as Fire Red and Leaf Green. Since those games were still in development, their block sizes and save offsets might not have been known during Wishmaker's development."),Object(a.b)("p",null,"It looks like the solution was to store the offsets and save sizes in the Fire Red and Leaf Green rom for Wishmaker to read. This would ensure Wishmaker wouldn't need to know the offset and block sizes."),Object(a.b)("p",null,"Interestingly, I dumped the rom from my Pokemon Emerald cartridge and verified that the offsets used by ",Object(a.b)("inlineCode",{parentName:"p"},"configureSaveStuff")," also holds the save offsets and save block sizes. I didn't see any indication that Wishmaker knew Emerald existed, so other apps besides Wishmaker must use these rom offsets as well."),Object(a.b)("h2",null,"Configuring the save interface"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"validateSave")," ",Object(a.b)("em",{parentName:"p"},"very")," roughly looks like:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),"bool validateSave() {\n  bool result = func1();\n\n  // Enable timer for save handling\n\n  return result == false;\n}\n\nbool func1() {\n  u16 func2Result = func2();\n\n  while(true) {\n    u8* someStruct = constantData[i];\n\n    if (*(u16*)(someStruct + 0x28) == 0) {\n      // Store struct values in global variable\n      // Fail\n      return true;\n    }\n\n    if (*(u16*)(someStruct + 0x28) == func2Result) {\n      // Store struct values in global variable\n      // Success\n      return false;\n    }\n  }\n\n  // Success\n  return false;\n}\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"func1")," endlessly iterates over some constant data, and each iteration checks if a field on the constant data is 0 or matches ",Object(a.b)("inlineCode",{parentName:"p"},"func2Result"),". The function fails if the constant is 0, and succeeds otherwise."),Object(a.b)("p",null,"Looking at the data in ",Object(a.b)("inlineCode",{parentName:"p"},"constantData"),", I saw this could only occur for 3 iterations, as the third struct has 0 in field 0x28."),Object(a.b)("p",null,"Bytes in one of the structs:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),"5d 4f 01 02 e5 4d 01 02 59 4e 01 02\n45 4d 01 02 70 aa 01 02 00 00 02 00\n00 10 00 00 0c 00 20 00 00 00 00 00\n03 00 01 00 c2 09 00 00\n")),Object(a.b)("p",null,"Ghidra identified five offsets in the middle of the structs. Further inspection showed the first four were all routines. The last was a reference to another struct."),Object(a.b)("p",null,"Each struct had the same set of bytes, except for the u16 at 0x28, and a reference to another struct:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),"FUN_02014f5d\nFUN_02014de5\nFUN_02014e59\nFUN_02014d45\nSTRUCT_REF_0201aa70\n00 00 02 00\n00 10 00 00 0c 00 20 00 00 00 00 00\n03 00 01 00\n09c2\n00 00\n")),Object(a.b)("p",null,"Three of the four routines referenced 0xE000000, 0xE002AAA, and 0xE005555, and the remaining routine referenced the other routines."),Object(a.b)("p",null,"A little searching of the numbers found ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://dillonbeliveau.com/2020/06/05/GBA-FLASH.html"}),"this GBA Flash documentation"),", which describes the process used by the Gameboy Advance to talk with save chips on a game cartridge."),Object(a.b)("p",null,"In general, to talk with the save chips, the game writes:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{}),"0xE002AAA = 0x55\n0xE005555 = 0xAA\n// Command\n")),Object(a.b)("p",null,"Based on that, I learned field 0x28 is used to store the flash chip Id in one of the routines. A list of ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://reinerziegler.de.mirrors.gg8.se/GBA/gba.htm"}),"Gameboy Advance Flash chips")," allowed me to label the chips each struct was using."),Object(a.b)("p",null,"With this new information, I was able to label all of the routines, and reverse engineer every other routine the routines in the struct called. Even condensed, there's too much information in those routines to put in this blog post, so I'll just skip to the final shape of the structs:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),"enum SaveChipId {\n  // Only the chips being used are labeled\n  CHIP_MACRONIX = 0x09c2,\n  CHIP_SANYO = 0x1362,\n  CHIP_NONE = 0x0000,\n};\n\nstruct TimerSetting {\n  u16 timeoutCounter;\n  u16 counter;\n  u16 control;\n};\n\nstruct TimerSettings {\n  struct TimerSetting timer0;\n  struct TimerSetting timer1;\n  struct TimerSetting timer2;\n  struct TimerSetting timer3;\n};\n\nstruct SaveConfig {\n  u32 saveSize;\n  u16 blockSize;\n  u16 unk1;\n  u8 blockShift; // Used to shift a block that will be erased, e.g. (0xA << blockShift) + 0xE0000000\n  u8 unk2;\n  u16 maxBlock;\n  u32 unk3;\n  u16 waitStateSetting;\n  u16 unk4;\n};\n\nstruct SaveChip {\n  WriteDataToBlock writeDataToBlock;\n  EraseEntireSave eraseEntireSave;\n  EraseSaveBlock eraseSaveBlock;\n  WaitForResult waitForResult;\n  struct TimerSettings *timerSettings;\n  struct SaveConfig config;\n  enum SaveChipId chipId;\n};\n")),Object(a.b)("p",null,"The original bytes posted earlier would then become:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),"#define TIMER_F_256 BIT(1)\n// Thanks to libgba for TIMER_IRQ and TIMER_START\n#define SAVE_TIMER_CONTROL TIMER_IRQ | TIMER_START | TIMER_F_256\n\nstruct TimerSettings MacronixTimer = {\n    .timer0 = {.timeoutCounter = 0xA, .counter = 0xFFBD, .control = SAVE_TIMER_CONTROL},\n    .timer1 = {.timeoutCounter = 0xA, .counter = 0xFFBD, .control = SAVE_TIMER_CONTROL},\n    .timer2 = {.timeoutCounter = 0x7D0, .counter = 0xFFBD, .control = SAVE_TIMER_CONTROL},\n    .timer3 = {.timeoutCounter = 0x7D0, .counter = 0xFFBD, .control = SAVE_TIMER_CONTROL},\n};\n\nstruct SaveChip Macronix = {\n      .writeDataToPage = writeDataToPage,\n      .eraseEntireSave = eraseEntireSave,\n      .eraseSavePage = eraseSavePage,\n      .waitForResult = waitForResult,\n      .timerSettings = &MacronixTimer,\n      .config = {\n          .saveSize = 0x20000,\n          .pageSize = 0x1000,\n          .unk1 = 0x0,\n          .pageShift = 0xC,\n          .unk2 = 0x0,\n          .maxPage = 0x20,\n          .unk3 = 0x0,\n          .waitStateSetting = 03,\n          .unk4 = 01,\n      },\n      .chipId = CHIP_MACRONIX,\n};\n")),Object(a.b)("p",null,"The original list of configurations:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),"struct SaveChip *G_SAVE_CHIPS[3] = {\n    &Macronix,\n    &Sanyo,\n    &None,\n};\n")),Object(a.b)("p",null,"The original functions rewritten:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-cpp"}),"bool configureAndValidateSaveConfig() {\n  u32 result = configureSaveChip();\n\n  // Enable timer for save handling\n\n  return result == 0;\n}\n\nbool configureSaveChip() {\n  u16 flashChipId = readFlashChipId();\n\n  for (u32 i = 0; i < 3; i++) {\n    struct SaveChip *saveChip = G_SAVE_CHIPS[i];\n\n    if (saveChip->chipId == CHIP_NONE) {\n      // Store struct values in global variable\n      // Fail\n      return true;\n    }\n\n    if (saveChip->chipId == flashChipId) {\n      // Store struct values in global variable\n      // Success\n      return false;\n    }\n  }\n\n  // Success\n  return 0;\n}\n")),Object(a.b)("h2",null,"The mystery solved"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"configureSaveChip"),' checks if the inserted cartridge uses a Macronix flash chip. If not, it checks if the cartridge uses a Sanyo flash chip. If neither of those succeed, the function will set the flash chip Id to "no chip" and fail.'),Object(a.b)("p",null,'This explains the multiple "corrupted" errors: one of the errors actually means an unofficial cartridge was used.'),Object(a.b)("p",null,"That has the potential to fail on ceratin emulators, so it should be patched as well."),Object(a.b)("h2",null,"Patching the chip Id check"),Object(a.b)("p",null,"Based on what I said earlier, one would presume I wrote the patch by having ",Object(a.b)("inlineCode",{parentName:"p"},"readFlashChipId")," always return a valid chip Id. Normally I would, but I had a good reason to not do that in this case."),Object(a.b)("p",null,"The Wishmaker multiboot rom is almost entirely compressed with LZ77. Its entrypoint decompresses the compressed code, then jumps execution to the decompressed code."),Object(a.b)("p",null,"Had I made any changes to the decompressed code, recompressed it, then built a patch based off of that, the resulting patch would potentially contain a lot of the original code, which would be bad to distribute for obvious reasons, and defeats the purpose of being just a 'patch'."),Object(a.b)("p",null,"Due to how LZ77 works, there were a decent amount of instructions in the compressed binary that I was able to patch as if it were decompressed, and the decompressed binary was only patched in my intended locations."),Object(a.b)("p",null,"However, I didn't see a good way to patch the compressed ",Object(a.b)("inlineCode",{parentName:"p"},"readFlashChipId")," to return a valid chip Id without affecting other instructions when decompressed, so instead I patched ",Object(a.b)("inlineCode",{parentName:"p"},"configureSaveChip"),"."),Object(a.b)("p",null,"The three different save chip structs are all identical except for the chip Id. For this reason, it really didn't matter which chip I chose to use, as they would all function identically. As long as ",Object(a.b)("inlineCode",{parentName:"p"},"configureSaveChip")," returned false, it would be good."),Object(a.b)("h2",null,"Final result"),Object(a.b)("p",null,"After applying the two patches to the Wishmaker multiboot rom, it worked perfectly, and the two patches can be distributed as a single IPS file."),Object(a.b)("p",null,"It is now possible to get a Wishmaker Jirachi from a Gameboy Advance emulator without trying to mess with a Gamecube emulator."),Object(a.b)("p",null,"While gimmicky, it's also kind of fun to think about how it should also be possible to redeem a Wishmaker Jirachi using just a smartphone or Nintendo Switch with custom firmware."),Object(a.b)("p",null,"If you made it this far, thank you! I wasn't expecting that."))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-emulate-wishmaker-without-dolphin-index-mdx-afd56152c2fcf3947cc3.js.map